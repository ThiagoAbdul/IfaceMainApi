// <auto-generated />
using System;
using IfaceMainApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace IfaceMainApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240515033609_RenameTables")]
    partial class RenameTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("IfaceMainApi.Models.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AdministrativeDivision")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Complement")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StreetNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("addresses", (string)null);
                });

            modelBuilder.Entity("IfaceMainApi.Models.Entities.Caregiver", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CredentialsId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CredentialsId")
                        .IsUnique();

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("caregivers", (string)null);
                });

            modelBuilder.Entity("IfaceMainApi.Models.Entities.CaregiverHelp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("HelperId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SupervisorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("HelperId");

                    b.HasIndex("SupervisorId");

                    b.ToTable("caregiver_helps", (string)null);
                });

            modelBuilder.Entity("IfaceMainApi.Models.Entities.Clinic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CorporateName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CredentialsId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("MainPhoneNumberId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SecondaryPhoneNumberId")
                        .HasColumnType("uuid");

                    b.Property<string>("TaxId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("CredentialsId")
                        .IsUnique();

                    b.HasIndex("MainPhoneNumberId")
                        .IsUnique();

                    b.HasIndex("SecondaryPhoneNumberId")
                        .IsUnique();

                    b.ToTable("clinics", (string)null);
                });

            modelBuilder.Entity("IfaceMainApi.Models.Entities.ClinicCaregiver", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CaregiverId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClinicId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CaregiverId");

                    b.HasIndex("ClinicId");

                    b.ToTable("clinic_caregivers", (string)null);
                });

            modelBuilder.Entity("IfaceMainApi.Models.Entities.Credentials", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("HasMfa")
                        .HasColumnType("boolean");

                    b.Property<string>("HashPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("credentials", (string)null);
                });

            modelBuilder.Entity("IfaceMainApi.Models.Entities.Medicine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("DrugLabel")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("medicines", (string)null);
                });

            modelBuilder.Entity("IfaceMainApi.Models.Entities.NonUserSupportPerson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PersonWithAlzheimersDiseaseId")
                        .HasColumnType("uuid");

                    b.Property<int>("Relationship")
                        .HasColumnType("integer");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.HasIndex("PersonWithAlzheimersDiseaseId");

                    b.ToTable("non_user_support_persons", (string)null);
                });

            modelBuilder.Entity("IfaceMainApi.Models.Entities.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("MainAddressId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MainPhoneId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SecondaryAddressId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SecondaryPhoneId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MainAddressId")
                        .IsUnique();

                    b.HasIndex("MainPhoneId")
                        .IsUnique();

                    b.HasIndex("SecondaryAddressId")
                        .IsUnique();

                    b.HasIndex("SecondaryPhoneId")
                        .IsUnique();

                    b.ToTable("persons", (string)null);
                });

            modelBuilder.Entity("IfaceMainApi.Models.Entities.PersonWithAlzheimersDisease", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AlzheimerState")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<Guid?>("ClinicId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DeviceToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("IsTheClinicCaredFor")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ResponsibleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.HasIndex("ResponsibleId");

                    b.ToTable("persons_with_alzheimer_disease", (string)null);
                });

            modelBuilder.Entity("IfaceMainApi.Models.Entities.Phone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLandline")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("phones", (string)null);
                });

            modelBuilder.Entity("IfaceMainApi.Models.Entities.Prescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MedicineId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MedicineId");

                    b.HasIndex("PatientId");

                    b.ToTable("prescriptions", (string)null);
                });

            modelBuilder.Entity("IfaceMainApi.Models.Entities.Scheduling", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Cron")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsMedication")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PersonWithAlzheimersDiseaseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PrescriptionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PersonWithAlzheimersDiseaseId");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("schedules", (string)null);
                });

            modelBuilder.Entity("IfaceMainApi.Models.Entities.Caregiver", b =>
                {
                    b.HasOne("IfaceMainApi.Models.Entities.Credentials", "Credentials")
                        .WithOne()
                        .HasForeignKey("IfaceMainApi.Models.Entities.Caregiver", "CredentialsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IfaceMainApi.Models.Entities.Person", "Person")
                        .WithOne()
                        .HasForeignKey("IfaceMainApi.Models.Entities.Caregiver", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Credentials");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("IfaceMainApi.Models.Entities.CaregiverHelp", b =>
                {
                    b.HasOne("IfaceMainApi.Models.Entities.Caregiver", "Helper")
                        .WithMany()
                        .HasForeignKey("HelperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IfaceMainApi.Models.Entities.Caregiver", "Supervisor")
                        .WithMany()
                        .HasForeignKey("SupervisorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Helper");

                    b.Navigation("Supervisor");
                });

            modelBuilder.Entity("IfaceMainApi.Models.Entities.Clinic", b =>
                {
                    b.HasOne("IfaceMainApi.Models.Entities.Address", "Address")
                        .WithOne()
                        .HasForeignKey("IfaceMainApi.Models.Entities.Clinic", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IfaceMainApi.Models.Entities.Credentials", "Credentials")
                        .WithOne()
                        .HasForeignKey("IfaceMainApi.Models.Entities.Clinic", "CredentialsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IfaceMainApi.Models.Entities.Phone", "MainPhoneNumber")
                        .WithOne()
                        .HasForeignKey("IfaceMainApi.Models.Entities.Clinic", "MainPhoneNumberId");

                    b.HasOne("IfaceMainApi.Models.Entities.Phone", "SecondaryPhoneNumber")
                        .WithOne()
                        .HasForeignKey("IfaceMainApi.Models.Entities.Clinic", "SecondaryPhoneNumberId");

                    b.Navigation("Address");

                    b.Navigation("Credentials");

                    b.Navigation("MainPhoneNumber");

                    b.Navigation("SecondaryPhoneNumber");
                });

            modelBuilder.Entity("IfaceMainApi.Models.Entities.ClinicCaregiver", b =>
                {
                    b.HasOne("IfaceMainApi.Models.Entities.Caregiver", "Caregiver")
                        .WithMany("ClinicCaregivers")
                        .HasForeignKey("CaregiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IfaceMainApi.Models.Entities.Clinic", "Clinic")
                        .WithMany("ClinicCaregivers")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Caregiver");

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("IfaceMainApi.Models.Entities.NonUserSupportPerson", b =>
                {
                    b.HasOne("IfaceMainApi.Models.Entities.Person", "Person")
                        .WithOne()
                        .HasForeignKey("IfaceMainApi.Models.Entities.NonUserSupportPerson", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IfaceMainApi.Models.Entities.PersonWithAlzheimersDisease", "PersonWithAlzheimersDisease")
                        .WithMany("NonUserSupportPeople")
                        .HasForeignKey("PersonWithAlzheimersDiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("PersonWithAlzheimersDisease");
                });

            modelBuilder.Entity("IfaceMainApi.Models.Entities.Person", b =>
                {
                    b.HasOne("IfaceMainApi.Models.Entities.Address", "MainAddress")
                        .WithOne()
                        .HasForeignKey("IfaceMainApi.Models.Entities.Person", "MainAddressId");

                    b.HasOne("IfaceMainApi.Models.Entities.Phone", "MainPhone")
                        .WithOne()
                        .HasForeignKey("IfaceMainApi.Models.Entities.Person", "MainPhoneId");

                    b.HasOne("IfaceMainApi.Models.Entities.Address", "SecondaryAddress")
                        .WithOne()
                        .HasForeignKey("IfaceMainApi.Models.Entities.Person", "SecondaryAddressId");

                    b.HasOne("IfaceMainApi.Models.Entities.Phone", "SecondaryPhone")
                        .WithOne()
                        .HasForeignKey("IfaceMainApi.Models.Entities.Person", "SecondaryPhoneId");

                    b.Navigation("MainAddress");

                    b.Navigation("MainPhone");

                    b.Navigation("SecondaryAddress");

                    b.Navigation("SecondaryPhone");
                });

            modelBuilder.Entity("IfaceMainApi.Models.Entities.PersonWithAlzheimersDisease", b =>
                {
                    b.HasOne("IfaceMainApi.Models.Entities.Clinic", "Clinic")
                        .WithMany("Patients")
                        .HasForeignKey("ClinicId");

                    b.HasOne("IfaceMainApi.Models.Entities.Person", "Person")
                        .WithOne()
                        .HasForeignKey("IfaceMainApi.Models.Entities.PersonWithAlzheimersDisease", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IfaceMainApi.Models.Entities.Caregiver", "Responsible")
                        .WithMany("PersonsWithAlzheimerDisease")
                        .HasForeignKey("ResponsibleId");

                    b.Navigation("Clinic");

                    b.Navigation("Person");

                    b.Navigation("Responsible");
                });

            modelBuilder.Entity("IfaceMainApi.Models.Entities.Prescription", b =>
                {
                    b.HasOne("IfaceMainApi.Models.Entities.Medicine", "Medicine")
                        .WithMany()
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IfaceMainApi.Models.Entities.PersonWithAlzheimersDisease", "Patient")
                        .WithMany("Prescriptions")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicine");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("IfaceMainApi.Models.Entities.Scheduling", b =>
                {
                    b.HasOne("IfaceMainApi.Models.Entities.PersonWithAlzheimersDisease", "PersonWithAlzheimersDisease")
                        .WithMany("Schedules")
                        .HasForeignKey("PersonWithAlzheimersDiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IfaceMainApi.Models.Entities.Prescription", "Prescription")
                        .WithMany()
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonWithAlzheimersDisease");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("IfaceMainApi.Models.Entities.Caregiver", b =>
                {
                    b.Navigation("ClinicCaregivers");

                    b.Navigation("PersonsWithAlzheimerDisease");
                });

            modelBuilder.Entity("IfaceMainApi.Models.Entities.Clinic", b =>
                {
                    b.Navigation("ClinicCaregivers");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("IfaceMainApi.Models.Entities.PersonWithAlzheimersDisease", b =>
                {
                    b.Navigation("NonUserSupportPeople");

                    b.Navigation("Prescriptions");

                    b.Navigation("Schedules");
                });
#pragma warning restore 612, 618
        }
    }
}
