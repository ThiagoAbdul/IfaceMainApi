// <auto-generated />
using System;
using IfaceMainApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace IfaceMainApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("IfaceMainApi.Models.Entities.Careful", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CarefulToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CaregiverId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 9, 11, 3, 22, 44, 334, DateTimeKind.Utc).AddTicks(6749));

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PwadId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CaregiverId");

                    b.HasIndex("PwadId", "CaregiverId")
                        .IsUnique();

                    b.ToTable("Carefuls");
                });

            modelBuilder.Entity("IfaceMainApi.Models.Entities.Caregiver", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 9, 11, 3, 22, 44, 332, DateTimeKind.Utc).AddTicks(9350));

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AuthId");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("caregivers", (string)null);
                });

            modelBuilder.Entity("IfaceMainApi.Models.Entities.Change", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 9, 11, 3, 22, 44, 333, DateTimeKind.Utc).AddTicks(2001));

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Operation")
                        .HasColumnType("integer");

                    b.Property<Guid?>("RegisterId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Sync")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("changes", (string)null);
                });

            modelBuilder.Entity("IfaceMainApi.Models.Entities.KnownPerson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 9, 11, 3, 22, 44, 333, DateTimeKind.Utc).AddTicks(2500));

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PersonWithAlzheimersDiseaseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.HasIndex("PersonWithAlzheimersDiseaseId");

                    b.ToTable("known_persons", (string)null);
                });

            modelBuilder.Entity("IfaceMainApi.Models.Entities.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 9, 11, 3, 22, 44, 333, DateTimeKind.Utc).AddTicks(4670));

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MainPhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("SecondaryPhoneNumber")
                        .HasColumnType("text");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("persons", (string)null);
                });

            modelBuilder.Entity("IfaceMainApi.Models.Entities.PersonWithAlzheimerDisease", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AlzheimerStage")
                        .HasColumnType("integer");

                    b.Property<Guid?>("CaregiverId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 9, 11, 3, 22, 44, 333, DateTimeKind.Utc).AddTicks(5091));

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DeviceToken")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MainCaregiverId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CaregiverId");

                    b.HasIndex("MainCaregiverId");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("persons_with_alzheimer_disease", (string)null);
                });

            modelBuilder.Entity("IfaceMainApi.Models.Entities.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 9, 11, 3, 22, 44, 334, DateTimeKind.Utc).AddTicks(2513));

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Embedding")
                        .HasColumnType("text");

                    b.Property<Guid>("KnownPersonId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("KnownPersonId");

                    b.ToTable("photos", (string)null);
                });

            modelBuilder.Entity("IfaceMainApi.Models.Entities.Prescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 9, 11, 3, 22, 44, 334, DateTimeKind.Utc).AddTicks(3522));

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MedicineName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("prescriptions", (string)null);
                });

            modelBuilder.Entity("IfaceMainApi.Models.Entities.Routine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 9, 11, 3, 22, 44, 334, DateTimeKind.Utc).AddTicks(4776));

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("CronExp")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PersonWithAlzheimersDiseaseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PersonWithAlzheimersDiseaseId");

                    b.ToTable("Routines");
                });

            modelBuilder.Entity("IfaceMainApi.Models.Entities.Scheduling", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 9, 11, 3, 22, 44, 334, DateTimeKind.Utc).AddTicks(5663));

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PersonWithAlzheimersDiseaseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PrescriptionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("When")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PersonWithAlzheimersDiseaseId");

                    b.ToTable("schedules", (string)null);
                });

            modelBuilder.Entity("IfaceMainApi.Models.Entities.Careful", b =>
                {
                    b.HasOne("IfaceMainApi.Models.Entities.Caregiver", "Caregiver")
                        .WithMany("Carefuls")
                        .HasForeignKey("CaregiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IfaceMainApi.Models.Entities.PersonWithAlzheimerDisease", "Pwad")
                        .WithMany("Carefuls")
                        .HasForeignKey("PwadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Caregiver");

                    b.Navigation("Pwad");
                });

            modelBuilder.Entity("IfaceMainApi.Models.Entities.Caregiver", b =>
                {
                    b.HasOne("IfaceMainApi.Models.Entities.Person", "Person")
                        .WithOne()
                        .HasForeignKey("IfaceMainApi.Models.Entities.Caregiver", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("IfaceMainApi.Models.Entities.KnownPerson", b =>
                {
                    b.HasOne("IfaceMainApi.Models.Entities.Person", "Person")
                        .WithOne()
                        .HasForeignKey("IfaceMainApi.Models.Entities.KnownPerson", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IfaceMainApi.Models.Entities.PersonWithAlzheimerDisease", "PersonWithAlzheimersDisease")
                        .WithMany("KnownPersons")
                        .HasForeignKey("PersonWithAlzheimersDiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("PersonWithAlzheimersDisease");
                });

            modelBuilder.Entity("IfaceMainApi.Models.Entities.PersonWithAlzheimerDisease", b =>
                {
                    b.HasOne("IfaceMainApi.Models.Entities.Caregiver", null)
                        .WithMany("PersonsWithAlzheimerDisease")
                        .HasForeignKey("CaregiverId");

                    b.HasOne("IfaceMainApi.Models.Entities.Caregiver", "MainCaregiver")
                        .WithMany()
                        .HasForeignKey("MainCaregiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IfaceMainApi.Models.Entities.Person", "Person")
                        .WithOne()
                        .HasForeignKey("IfaceMainApi.Models.Entities.PersonWithAlzheimerDisease", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainCaregiver");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("IfaceMainApi.Models.Entities.Photo", b =>
                {
                    b.HasOne("IfaceMainApi.Models.Entities.KnownPerson", "KnownPerson")
                        .WithMany("Photos")
                        .HasForeignKey("KnownPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KnownPerson");
                });

            modelBuilder.Entity("IfaceMainApi.Models.Entities.Prescription", b =>
                {
                    b.HasOne("IfaceMainApi.Models.Entities.PersonWithAlzheimerDisease", "Patient")
                        .WithMany("Prescriptions")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("IfaceMainApi.Models.Entities.Routine", b =>
                {
                    b.HasOne("IfaceMainApi.Models.Entities.PersonWithAlzheimerDisease", "PersonWithAlzheimersDisease")
                        .WithMany("Routines")
                        .HasForeignKey("PersonWithAlzheimersDiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonWithAlzheimersDisease");
                });

            modelBuilder.Entity("IfaceMainApi.Models.Entities.Scheduling", b =>
                {
                    b.HasOne("IfaceMainApi.Models.Entities.PersonWithAlzheimerDisease", "PersonWithAlzheimersDisease")
                        .WithMany("Schedules")
                        .HasForeignKey("PersonWithAlzheimersDiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonWithAlzheimersDisease");
                });

            modelBuilder.Entity("IfaceMainApi.Models.Entities.Caregiver", b =>
                {
                    b.Navigation("Carefuls");

                    b.Navigation("PersonsWithAlzheimerDisease");
                });

            modelBuilder.Entity("IfaceMainApi.Models.Entities.KnownPerson", b =>
                {
                    b.Navigation("Photos");
                });

            modelBuilder.Entity("IfaceMainApi.Models.Entities.PersonWithAlzheimerDisease", b =>
                {
                    b.Navigation("Carefuls");

                    b.Navigation("KnownPersons");

                    b.Navigation("Prescriptions");

                    b.Navigation("Routines");

                    b.Navigation("Schedules");
                });
#pragma warning restore 612, 618
        }
    }
}
